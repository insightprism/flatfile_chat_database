# Fluentd configuration for FF Chat API log aggregation

<system>
  log_level info
  suppress_repeated_stacktrace true
</system>

# Input sources
<source>
  @type tail
  @id ff_chat_api_logs
  path /app/logs/ff_chat_api.log
  pos_file /fluentd/log/ff_chat_api.log.pos
  tag ff.chat.api
  format json
  time_key timestamp
  time_format %Y-%m-%dT%H:%M:%S.%L%z
  refresh_interval 10s
  rotate_wait 5s
  read_from_head true
</source>

<source>
  @type tail
  @id ff_chat_errors
  path /app/logs/errors.log
  pos_file /fluentd/log/errors.log.pos
  tag ff.chat.errors
  format json
  time_key timestamp
  time_format %Y-%m-%dT%H:%M:%S.%L%z
  refresh_interval 10s
  rotate_wait 5s
  read_from_head true
</source>

<source>
  @type tail
  @id ff_chat_access
  path /app/logs/access.log
  pos_file /fluentd/log/access.log.pos
  tag ff.chat.access
  format json
  time_key timestamp
  time_format %Y-%m-%dT%H:%M:%S.%L%z
  refresh_interval 10s
  rotate_wait 5s
  read_from_head true
</source>

# Docker container logs
<source>
  @type forward
  @id forward_input
  port 24224
  bind 0.0.0.0
</source>

# Filters for log processing
<filter ff.chat.**>
  @type record_transformer
  <record>
    hostname "#{Socket.gethostname}"
    service ff-chat-api
    environment "#{ENV['FF_ENV'] || 'production'}"
  </record>
</filter>

# Add severity parsing
<filter ff.chat.api>
  @type parser
  key_name message
  reserve_data true
  <parse>
    @type regexp
    expression /^(?<timestamp>[^\s]+)\s+(?<level>\w+)\s+(?<logger>[^\s]+)\s+(?<message>.*)$/
    time_key timestamp
    time_format %Y-%m-%dT%H:%M:%S.%L%z
  </parse>
</filter>

# Error detection and alerting
<filter ff.chat.**>
  @type grep
  <regexp>
    key level
    pattern /ERROR|CRITICAL|FATAL/
  </regexp>
  add_tag_prefix alert.
</filter>

# Performance metrics extraction
<filter ff.chat.api>
  @type parser
  key_name message
  reserve_data true
  <parse>
    @type regexp
    expression /processing_time:(?<processing_time>\d+\.?\d*)/
    types processing_time:float
  </parse>
</filter>

# Output configurations
<match ff.chat.api>
  @type file
  @id api_logs_output
  path /fluentd/log/api/ff_chat_api
  append true
  time_slice_format %Y%m%d%H
  time_slice_wait 10m
  time_format %Y-%m-%dT%H:%M:%S.%L%z
  compress gzip
  <buffer>
    timekey 1h
    timekey_wait 10m
    timekey_use_utc true
    chunk_limit_size 256m
    total_limit_size 2GB
    flush_interval 30s
    retry_max_interval 30
    retry_forever true
  </buffer>
  <format>
    @type json
  </format>
</match>

<match ff.chat.errors>
  @type file
  @id error_logs_output
  path /fluentd/log/errors/ff_chat_errors
  append true
  time_slice_format %Y%m%d%H
  time_slice_wait 10m
  time_format %Y-%m-%dT%H:%M:%S.%L%z
  compress gzip
  <buffer>
    timekey 1h
    timekey_wait 10m
    timekey_use_utc true
    chunk_limit_size 256m
    total_limit_size 1GB
    flush_interval 30s
    retry_max_interval 30
    retry_forever true
  </buffer>
  <format>
    @type json
  </format>
</match>

<match ff.chat.access>
  @type file
  @id access_logs_output
  path /fluentd/log/access/ff_chat_access
  append true
  time_slice_format %Y%m%d%H
  time_slice_wait 10m
  time_format %Y-%m-%dT%H:%M:%S.%L%z
  compress gzip
  <buffer>
    timekey 1h
    timekey_wait 10m
    timekey_use_utc true
    chunk_limit_size 256m
    total_limit_size 1GB
    flush_interval 30s
    retry_max_interval 30
    retry_forever true
  </buffer>
  <format>
    @type json
  </format>
</match>

# Alert outputs for critical errors
<match alert.ff.chat.**>
  @type copy
  <store>
    @type file
    @id alert_logs_output
    path /fluentd/log/alerts/ff_chat_alerts
    append true
    time_slice_format %Y%m%d
    time_slice_wait 10m
    time_format %Y-%m-%dT%H:%M:%S.%L%z
    <buffer>
      timekey 1d
      timekey_wait 10m
      timekey_use_utc true
      chunk_limit_size 64m
      total_limit_size 512m
      flush_interval 10s
    </buffer>
    <format>
      @type json
    </format>
  </store>
  # Uncomment to send alerts to external systems
  # <store>
  #   @type http
  #   endpoint_url http://alertmanager:9093/api/v1/alerts
  #   http_method post
  #   headers {"Content-Type":"application/json"}
  #   <format>
  #     @type json
  #   </format>
  # </store>
</match>

# Catch-all for unmatched logs
<match **>
  @type file
  @id misc_logs_output
  path /fluentd/log/misc/misc_logs
  append true
  time_slice_format %Y%m%d%H
  time_slice_wait 10m
  compress gzip
  <buffer>
    timekey 1h
    timekey_wait 10m
    timekey_use_utc true
    chunk_limit_size 128m
    total_limit_size 512m
    flush_interval 60s
  </buffer>
  <format>
    @type json
  </format>
</match>