# FF Chat API Production Docker Compose
# Complete production deployment with monitoring and observability

version: '3.8'

services:
  # Main FF Chat API service
  ff-chat-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: ff-chat-api
    restart: unless-stopped
    environment:
      - FF_ENV=production
      - FF_LOG_LEVEL=INFO
      - FF_STORAGE_BASE_PATH=/app/data/storage
      - FF_VECTOR_BASE_PATH=/app/data/vector
      - FF_SEARCH_BASE_PATH=/app/data/search
      - FF_API_HOST=0.0.0.0
      - FF_API_PORT=8000
      - FF_API_WORKERS=4
      - FF_ENABLE_CORS=true
      - FF_ENABLE_AUTH=true
      - FF_RATE_LIMIT_PER_MINUTE=100
    ports:
      - "8000:8000"
    volumes:
      - ff_chat_data:/app/data
      - ff_chat_logs:/app/logs
      - ./config/production.yml:/app/config/production.yml:ro
    networks:
      - ff-chat-network
    depends_on:
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: ff-chat-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - ff-chat-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ff-chat-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ff-chat-network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ff-chat-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - ff-chat-network
    depends_on:
      - prometheus

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: ff-chat-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - ff-chat-network
    depends_on:
      - ff-chat-api

  # Log aggregation with Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: ff-chat-fluentd
    restart: unless-stopped
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - ff_chat_logs:/app/logs:ro
      - fluentd_logs:/fluentd/log
    networks:
      - ff-chat-network
    depends_on:
      - ff-chat-api

volumes:
  ff_chat_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  ff_chat_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  fluentd_logs:
    driver: local

networks:
  ff-chat-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16